// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             v5.29.3
// source: webdav/webdav.proto

package webdav

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationWebdavFsGet = "/api.webdav.Webdav/FsGet"
const OperationWebdavFsList = "/api.webdav.Webdav/FsList"
const OperationWebdavFsSearch = "/api.webdav.Webdav/FsSearch"
const OperationWebdavFsTest = "/api.webdav.Webdav/FsTest"

type WebdavHTTPServer interface {
	FsGet(context.Context, *FsGetReq) (*FsGetResp, error)
	FsList(context.Context, *FsListReq) (*FsListResp, error)
	FsSearch(context.Context, *FsSearchReq) (*FsSearchResp, error)
	FsTest(context.Context, *FsTestReq) (*Empty, error)
}

func RegisterWebdavHTTPServer(s *http.Server, srv WebdavHTTPServer) {
	r := s.Route("/")
	r.POST("/fs/get", _Webdav_FsGet1_HTTP_Handler(srv))
	r.POST("/fs/list", _Webdav_FsList2_HTTP_Handler(srv))
	r.POST("/fs/search", _Webdav_FsSearch1_HTTP_Handler(srv))
	r.POST("/fs/test", _Webdav_FsTest0_HTTP_Handler(srv))
}

func _Webdav_FsGet1_HTTP_Handler(srv WebdavHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FsGetReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWebdavFsGet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FsGet(ctx, req.(*FsGetReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FsGetResp)
		return ctx.Result(200, reply)
	}
}

func _Webdav_FsList2_HTTP_Handler(srv WebdavHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FsListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWebdavFsList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FsList(ctx, req.(*FsListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FsListResp)
		return ctx.Result(200, reply)
	}
}

func _Webdav_FsSearch1_HTTP_Handler(srv WebdavHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FsSearchReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWebdavFsSearch)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FsSearch(ctx, req.(*FsSearchReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FsSearchResp)
		return ctx.Result(200, reply)
	}
}

func _Webdav_FsTest0_HTTP_Handler(srv WebdavHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FsTestReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWebdavFsTest)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FsTest(ctx, req.(*FsTestReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

type WebdavHTTPClient interface {
	FsGet(ctx context.Context, req *FsGetReq, opts ...http.CallOption) (rsp *FsGetResp, err error)
	FsList(ctx context.Context, req *FsListReq, opts ...http.CallOption) (rsp *FsListResp, err error)
	FsSearch(ctx context.Context, req *FsSearchReq, opts ...http.CallOption) (rsp *FsSearchResp, err error)
	FsTest(ctx context.Context, req *FsTestReq, opts ...http.CallOption) (rsp *Empty, err error)
}

type WebdavHTTPClientImpl struct {
	cc *http.Client
}

func NewWebdavHTTPClient(client *http.Client) WebdavHTTPClient {
	return &WebdavHTTPClientImpl{client}
}

func (c *WebdavHTTPClientImpl) FsGet(ctx context.Context, in *FsGetReq, opts ...http.CallOption) (*FsGetResp, error) {
	var out FsGetResp
	pattern := "/fs/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWebdavFsGet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WebdavHTTPClientImpl) FsList(ctx context.Context, in *FsListReq, opts ...http.CallOption) (*FsListResp, error) {
	var out FsListResp
	pattern := "/fs/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWebdavFsList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WebdavHTTPClientImpl) FsSearch(ctx context.Context, in *FsSearchReq, opts ...http.CallOption) (*FsSearchResp, error) {
	var out FsSearchResp
	pattern := "/fs/search"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWebdavFsSearch))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WebdavHTTPClientImpl) FsTest(ctx context.Context, in *FsTestReq, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/fs/test"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWebdavFsTest))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
