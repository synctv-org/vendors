// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: webdav/webdav.proto

package webdav

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Webdav_FsGet_FullMethodName    = "/api.webdav.Webdav/FsGet"
	Webdav_FsList_FullMethodName   = "/api.webdav.Webdav/FsList"
	Webdav_FsSearch_FullMethodName = "/api.webdav.Webdav/FsSearch"
	Webdav_FsTest_FullMethodName   = "/api.webdav.Webdav/FsTest"
)

// WebdavClient is the client API for Webdav service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebdavClient interface {
	FsGet(ctx context.Context, in *FsGetReq, opts ...grpc.CallOption) (*FsGetResp, error)
	FsList(ctx context.Context, in *FsListReq, opts ...grpc.CallOption) (*FsListResp, error)
	FsSearch(ctx context.Context, in *FsSearchReq, opts ...grpc.CallOption) (*FsSearchResp, error)
	FsTest(ctx context.Context, in *FsTestReq, opts ...grpc.CallOption) (*Empty, error)
}

type webdavClient struct {
	cc grpc.ClientConnInterface
}

func NewWebdavClient(cc grpc.ClientConnInterface) WebdavClient {
	return &webdavClient{cc}
}

func (c *webdavClient) FsGet(ctx context.Context, in *FsGetReq, opts ...grpc.CallOption) (*FsGetResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FsGetResp)
	err := c.cc.Invoke(ctx, Webdav_FsGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webdavClient) FsList(ctx context.Context, in *FsListReq, opts ...grpc.CallOption) (*FsListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FsListResp)
	err := c.cc.Invoke(ctx, Webdav_FsList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webdavClient) FsSearch(ctx context.Context, in *FsSearchReq, opts ...grpc.CallOption) (*FsSearchResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FsSearchResp)
	err := c.cc.Invoke(ctx, Webdav_FsSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webdavClient) FsTest(ctx context.Context, in *FsTestReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Webdav_FsTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebdavServer is the server API for Webdav service.
// All implementations must embed UnimplementedWebdavServer
// for forward compatibility.
type WebdavServer interface {
	FsGet(context.Context, *FsGetReq) (*FsGetResp, error)
	FsList(context.Context, *FsListReq) (*FsListResp, error)
	FsSearch(context.Context, *FsSearchReq) (*FsSearchResp, error)
	FsTest(context.Context, *FsTestReq) (*Empty, error)
	mustEmbedUnimplementedWebdavServer()
}

// UnimplementedWebdavServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWebdavServer struct{}

func (UnimplementedWebdavServer) FsGet(context.Context, *FsGetReq) (*FsGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FsGet not implemented")
}
func (UnimplementedWebdavServer) FsList(context.Context, *FsListReq) (*FsListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FsList not implemented")
}
func (UnimplementedWebdavServer) FsSearch(context.Context, *FsSearchReq) (*FsSearchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FsSearch not implemented")
}
func (UnimplementedWebdavServer) FsTest(context.Context, *FsTestReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FsTest not implemented")
}
func (UnimplementedWebdavServer) mustEmbedUnimplementedWebdavServer() {}
func (UnimplementedWebdavServer) testEmbeddedByValue()                {}

// UnsafeWebdavServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebdavServer will
// result in compilation errors.
type UnsafeWebdavServer interface {
	mustEmbedUnimplementedWebdavServer()
}

func RegisterWebdavServer(s grpc.ServiceRegistrar, srv WebdavServer) {
	// If the following call pancis, it indicates UnimplementedWebdavServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Webdav_ServiceDesc, srv)
}

func _Webdav_FsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FsGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebdavServer).FsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Webdav_FsGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebdavServer).FsGet(ctx, req.(*FsGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Webdav_FsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FsListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebdavServer).FsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Webdav_FsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebdavServer).FsList(ctx, req.(*FsListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Webdav_FsSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FsSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebdavServer).FsSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Webdav_FsSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebdavServer).FsSearch(ctx, req.(*FsSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Webdav_FsTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FsTestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebdavServer).FsTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Webdav_FsTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebdavServer).FsTest(ctx, req.(*FsTestReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Webdav_ServiceDesc is the grpc.ServiceDesc for Webdav service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Webdav_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.webdav.Webdav",
	HandlerType: (*WebdavServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FsGet",
			Handler:    _Webdav_FsGet_Handler,
		},
		{
			MethodName: "FsList",
			Handler:    _Webdav_FsList_Handler,
		},
		{
			MethodName: "FsSearch",
			Handler:    _Webdav_FsSearch_Handler,
		},
		{
			MethodName: "FsTest",
			Handler:    _Webdav_FsTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webdav/webdav.proto",
}
