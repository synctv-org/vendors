// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: emby/emby.proto

package emby

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Emby_Login_FullMethodName         = "/api.emby.Emby/Login"
	Emby_Me_FullMethodName            = "/api.emby.Emby/Me"
	Emby_GetItems_FullMethodName      = "/api.emby.Emby/GetItems"
	Emby_GetItem_FullMethodName       = "/api.emby.Emby/GetItem"
	Emby_GetSystemInfo_FullMethodName = "/api.emby.Emby/GetSystemInfo"
	Emby_FsList_FullMethodName        = "/api.emby.Emby/FsList"
)

// EmbyClient is the client API for Emby service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmbyClient interface {
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	Me(ctx context.Context, in *MeReq, opts ...grpc.CallOption) (*MeResp, error)
	GetItems(ctx context.Context, in *GetItemsReq, opts ...grpc.CallOption) (*GetItemsResp, error)
	GetItem(ctx context.Context, in *GetItemReq, opts ...grpc.CallOption) (*Item, error)
	GetSystemInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SystemInfoResp, error)
	FsList(ctx context.Context, in *FsListReq, opts ...grpc.CallOption) (*FsListResp, error)
}

type embyClient struct {
	cc grpc.ClientConnInterface
}

func NewEmbyClient(cc grpc.ClientConnInterface) EmbyClient {
	return &embyClient{cc}
}

func (c *embyClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, Emby_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *embyClient) Me(ctx context.Context, in *MeReq, opts ...grpc.CallOption) (*MeResp, error) {
	out := new(MeResp)
	err := c.cc.Invoke(ctx, Emby_Me_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *embyClient) GetItems(ctx context.Context, in *GetItemsReq, opts ...grpc.CallOption) (*GetItemsResp, error) {
	out := new(GetItemsResp)
	err := c.cc.Invoke(ctx, Emby_GetItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *embyClient) GetItem(ctx context.Context, in *GetItemReq, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, Emby_GetItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *embyClient) GetSystemInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SystemInfoResp, error) {
	out := new(SystemInfoResp)
	err := c.cc.Invoke(ctx, Emby_GetSystemInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *embyClient) FsList(ctx context.Context, in *FsListReq, opts ...grpc.CallOption) (*FsListResp, error) {
	out := new(FsListResp)
	err := c.cc.Invoke(ctx, Emby_FsList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmbyServer is the server API for Emby service.
// All implementations must embed UnimplementedEmbyServer
// for forward compatibility
type EmbyServer interface {
	Login(context.Context, *LoginReq) (*LoginResp, error)
	Me(context.Context, *MeReq) (*MeResp, error)
	GetItems(context.Context, *GetItemsReq) (*GetItemsResp, error)
	GetItem(context.Context, *GetItemReq) (*Item, error)
	GetSystemInfo(context.Context, *Empty) (*SystemInfoResp, error)
	FsList(context.Context, *FsListReq) (*FsListResp, error)
	mustEmbedUnimplementedEmbyServer()
}

// UnimplementedEmbyServer must be embedded to have forward compatible implementations.
type UnimplementedEmbyServer struct {
}

func (UnimplementedEmbyServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedEmbyServer) Me(context.Context, *MeReq) (*MeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Me not implemented")
}
func (UnimplementedEmbyServer) GetItems(context.Context, *GetItemsReq) (*GetItemsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItems not implemented")
}
func (UnimplementedEmbyServer) GetItem(context.Context, *GetItemReq) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedEmbyServer) GetSystemInfo(context.Context, *Empty) (*SystemInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemInfo not implemented")
}
func (UnimplementedEmbyServer) FsList(context.Context, *FsListReq) (*FsListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FsList not implemented")
}
func (UnimplementedEmbyServer) mustEmbedUnimplementedEmbyServer() {}

// UnsafeEmbyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmbyServer will
// result in compilation errors.
type UnsafeEmbyServer interface {
	mustEmbedUnimplementedEmbyServer()
}

func RegisterEmbyServer(s grpc.ServiceRegistrar, srv EmbyServer) {
	s.RegisterService(&Emby_ServiceDesc, srv)
}

func _Emby_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbyServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Emby_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbyServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emby_Me_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbyServer).Me(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Emby_Me_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbyServer).Me(ctx, req.(*MeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emby_GetItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbyServer).GetItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Emby_GetItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbyServer).GetItems(ctx, req.(*GetItemsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emby_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbyServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Emby_GetItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbyServer).GetItem(ctx, req.(*GetItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emby_GetSystemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbyServer).GetSystemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Emby_GetSystemInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbyServer).GetSystemInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emby_FsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FsListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbyServer).FsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Emby_FsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbyServer).FsList(ctx, req.(*FsListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Emby_ServiceDesc is the grpc.ServiceDesc for Emby service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Emby_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.emby.Emby",
	HandlerType: (*EmbyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Emby_Login_Handler,
		},
		{
			MethodName: "Me",
			Handler:    _Emby_Me_Handler,
		},
		{
			MethodName: "GetItems",
			Handler:    _Emby_GetItems_Handler,
		},
		{
			MethodName: "GetItem",
			Handler:    _Emby_GetItem_Handler,
		},
		{
			MethodName: "GetSystemInfo",
			Handler:    _Emby_GetSystemInfo_Handler,
		},
		{
			MethodName: "FsList",
			Handler:    _Emby_FsList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "emby/emby.proto",
}
