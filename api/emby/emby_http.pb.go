// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v4.25.1
// source: emby/emby.proto

package emby

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationEmbyGetItem = "/api.emby.Emby/GetItem"
const OperationEmbyGetItems = "/api.emby.Emby/GetItems"
const OperationEmbyLogin = "/api.emby.Emby/Login"
const OperationEmbyMe = "/api.emby.Emby/Me"

type EmbyHTTPServer interface {
	GetItem(context.Context, *GetItemReq) (*Item, error)
	GetItems(context.Context, *GetItemsReq) (*GetItemsResp, error)
	Login(context.Context, *LoginReq) (*LoginResp, error)
	Me(context.Context, *MeReq) (*MeResp, error)
}

func RegisterEmbyHTTPServer(s *http.Server, srv EmbyHTTPServer) {
	r := s.Route("/")
	r.POST("/emby/Login", _Emby_Login1_HTTP_Handler(srv))
	r.POST("/emby/Users/Me", _Emby_Me1_HTTP_Handler(srv))
	r.POST("/emby/Items", _Emby_GetItems0_HTTP_Handler(srv))
	r.POST("/emby/Items/{itemId}", _Emby_GetItem0_HTTP_Handler(srv))
}

func _Emby_Login1_HTTP_Handler(srv EmbyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEmbyLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginResp)
		return ctx.Result(200, reply)
	}
}

func _Emby_Me1_HTTP_Handler(srv EmbyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEmbyMe)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Me(ctx, req.(*MeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MeResp)
		return ctx.Result(200, reply)
	}
}

func _Emby_GetItems0_HTTP_Handler(srv EmbyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetItemsReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEmbyGetItems)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetItems(ctx, req.(*GetItemsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetItemsResp)
		return ctx.Result(200, reply)
	}
}

func _Emby_GetItem0_HTTP_Handler(srv EmbyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetItemReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEmbyGetItem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetItem(ctx, req.(*GetItemReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Item)
		return ctx.Result(200, reply)
	}
}

type EmbyHTTPClient interface {
	GetItem(ctx context.Context, req *GetItemReq, opts ...http.CallOption) (rsp *Item, err error)
	GetItems(ctx context.Context, req *GetItemsReq, opts ...http.CallOption) (rsp *GetItemsResp, err error)
	Login(ctx context.Context, req *LoginReq, opts ...http.CallOption) (rsp *LoginResp, err error)
	Me(ctx context.Context, req *MeReq, opts ...http.CallOption) (rsp *MeResp, err error)
}

type EmbyHTTPClientImpl struct {
	cc *http.Client
}

func NewEmbyHTTPClient(client *http.Client) EmbyHTTPClient {
	return &EmbyHTTPClientImpl{client}
}

func (c *EmbyHTTPClientImpl) GetItem(ctx context.Context, in *GetItemReq, opts ...http.CallOption) (*Item, error) {
	var out Item
	pattern := "/emby/Items/{itemId}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEmbyGetItem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *EmbyHTTPClientImpl) GetItems(ctx context.Context, in *GetItemsReq, opts ...http.CallOption) (*GetItemsResp, error) {
	var out GetItemsResp
	pattern := "/emby/Items"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEmbyGetItems))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *EmbyHTTPClientImpl) Login(ctx context.Context, in *LoginReq, opts ...http.CallOption) (*LoginResp, error) {
	var out LoginResp
	pattern := "/emby/Login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEmbyLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *EmbyHTTPClientImpl) Me(ctx context.Context, in *MeReq, opts ...http.CallOption) (*MeResp, error) {
	var out MeResp
	pattern := "/emby/Users/Me"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEmbyMe))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
