// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: alist/alist.proto

package alist

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Alist_Login_FullMethodName   = "/api.alist.Alist/Login"
	Alist_FsGet_FullMethodName   = "/api.alist.Alist/FsGet"
	Alist_FsList_FullMethodName  = "/api.alist.Alist/FsList"
	Alist_FsOther_FullMethodName = "/api.alist.Alist/FsOther"
)

// AlistClient is the client API for Alist service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlistClient interface {
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	FsGet(ctx context.Context, in *FsGetReq, opts ...grpc.CallOption) (*FsGetResp, error)
	FsList(ctx context.Context, in *FsListReq, opts ...grpc.CallOption) (*FsListResp, error)
	FsOther(ctx context.Context, in *FsOtherReq, opts ...grpc.CallOption) (*FsOtherResp, error)
}

type alistClient struct {
	cc grpc.ClientConnInterface
}

func NewAlistClient(cc grpc.ClientConnInterface) AlistClient {
	return &alistClient{cc}
}

func (c *alistClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, Alist_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alistClient) FsGet(ctx context.Context, in *FsGetReq, opts ...grpc.CallOption) (*FsGetResp, error) {
	out := new(FsGetResp)
	err := c.cc.Invoke(ctx, Alist_FsGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alistClient) FsList(ctx context.Context, in *FsListReq, opts ...grpc.CallOption) (*FsListResp, error) {
	out := new(FsListResp)
	err := c.cc.Invoke(ctx, Alist_FsList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alistClient) FsOther(ctx context.Context, in *FsOtherReq, opts ...grpc.CallOption) (*FsOtherResp, error) {
	out := new(FsOtherResp)
	err := c.cc.Invoke(ctx, Alist_FsOther_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlistServer is the server API for Alist service.
// All implementations must embed UnimplementedAlistServer
// for forward compatibility
type AlistServer interface {
	Login(context.Context, *LoginReq) (*LoginResp, error)
	FsGet(context.Context, *FsGetReq) (*FsGetResp, error)
	FsList(context.Context, *FsListReq) (*FsListResp, error)
	FsOther(context.Context, *FsOtherReq) (*FsOtherResp, error)
	mustEmbedUnimplementedAlistServer()
}

// UnimplementedAlistServer must be embedded to have forward compatible implementations.
type UnimplementedAlistServer struct {
}

func (UnimplementedAlistServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAlistServer) FsGet(context.Context, *FsGetReq) (*FsGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FsGet not implemented")
}
func (UnimplementedAlistServer) FsList(context.Context, *FsListReq) (*FsListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FsList not implemented")
}
func (UnimplementedAlistServer) FsOther(context.Context, *FsOtherReq) (*FsOtherResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FsOther not implemented")
}
func (UnimplementedAlistServer) mustEmbedUnimplementedAlistServer() {}

// UnsafeAlistServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlistServer will
// result in compilation errors.
type UnsafeAlistServer interface {
	mustEmbedUnimplementedAlistServer()
}

func RegisterAlistServer(s grpc.ServiceRegistrar, srv AlistServer) {
	s.RegisterService(&Alist_ServiceDesc, srv)
}

func _Alist_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlistServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Alist_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlistServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alist_FsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FsGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlistServer).FsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Alist_FsGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlistServer).FsGet(ctx, req.(*FsGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alist_FsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FsListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlistServer).FsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Alist_FsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlistServer).FsList(ctx, req.(*FsListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alist_FsOther_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FsOtherReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlistServer).FsOther(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Alist_FsOther_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlistServer).FsOther(ctx, req.(*FsOtherReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Alist_ServiceDesc is the grpc.ServiceDesc for Alist service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Alist_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.alist.Alist",
	HandlerType: (*AlistServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Alist_Login_Handler,
		},
		{
			MethodName: "FsGet",
			Handler:    _Alist_FsGet_Handler,
		},
		{
			MethodName: "FsList",
			Handler:    _Alist_FsList_Handler,
		},
		{
			MethodName: "FsOther",
			Handler:    _Alist_FsOther_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "alist/alist.proto",
}
