// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v4.25.1
// source: alist/alist.proto

package alist

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAlistFsGet = "/api.alist.Alist/FsGet"
const OperationAlistFsList = "/api.alist.Alist/FsList"
const OperationAlistFsOther = "/api.alist.Alist/FsOther"
const OperationAlistLogin = "/api.alist.Alist/Login"
const OperationAlistMe = "/api.alist.Alist/Me"

type AlistHTTPServer interface {
	FsGet(context.Context, *FsGetReq) (*FsGetResp, error)
	FsList(context.Context, *FsListReq) (*FsListResp, error)
	FsOther(context.Context, *FsOtherReq) (*FsOtherResp, error)
	Login(context.Context, *LoginReq) (*LoginResp, error)
	Me(context.Context, *MeReq) (*MeResp, error)
}

func RegisterAlistHTTPServer(s *http.Server, srv AlistHTTPServer) {
	r := s.Route("/")
	r.POST("/auth/login", _Alist_Login0_HTTP_Handler(srv))
	r.GET("/me", _Alist_Me0_HTTP_Handler(srv))
	r.POST("/fs/get", _Alist_FsGet0_HTTP_Handler(srv))
	r.POST("/fs/list", _Alist_FsList0_HTTP_Handler(srv))
	r.POST("/fs/other", _Alist_FsOther0_HTTP_Handler(srv))
}

func _Alist_Login0_HTTP_Handler(srv AlistHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAlistLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginResp)
		return ctx.Result(200, reply)
	}
}

func _Alist_Me0_HTTP_Handler(srv AlistHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MeReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAlistMe)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Me(ctx, req.(*MeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MeResp)
		return ctx.Result(200, reply)
	}
}

func _Alist_FsGet0_HTTP_Handler(srv AlistHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FsGetReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAlistFsGet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FsGet(ctx, req.(*FsGetReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FsGetResp)
		return ctx.Result(200, reply)
	}
}

func _Alist_FsList0_HTTP_Handler(srv AlistHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FsListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAlistFsList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FsList(ctx, req.(*FsListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FsListResp)
		return ctx.Result(200, reply)
	}
}

func _Alist_FsOther0_HTTP_Handler(srv AlistHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FsOtherReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAlistFsOther)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FsOther(ctx, req.(*FsOtherReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FsOtherResp)
		return ctx.Result(200, reply)
	}
}

type AlistHTTPClient interface {
	FsGet(ctx context.Context, req *FsGetReq, opts ...http.CallOption) (rsp *FsGetResp, err error)
	FsList(ctx context.Context, req *FsListReq, opts ...http.CallOption) (rsp *FsListResp, err error)
	FsOther(ctx context.Context, req *FsOtherReq, opts ...http.CallOption) (rsp *FsOtherResp, err error)
	Login(ctx context.Context, req *LoginReq, opts ...http.CallOption) (rsp *LoginResp, err error)
	Me(ctx context.Context, req *MeReq, opts ...http.CallOption) (rsp *MeResp, err error)
}

type AlistHTTPClientImpl struct {
	cc *http.Client
}

func NewAlistHTTPClient(client *http.Client) AlistHTTPClient {
	return &AlistHTTPClientImpl{client}
}

func (c *AlistHTTPClientImpl) FsGet(ctx context.Context, in *FsGetReq, opts ...http.CallOption) (*FsGetResp, error) {
	var out FsGetResp
	pattern := "/fs/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAlistFsGet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AlistHTTPClientImpl) FsList(ctx context.Context, in *FsListReq, opts ...http.CallOption) (*FsListResp, error) {
	var out FsListResp
	pattern := "/fs/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAlistFsList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AlistHTTPClientImpl) FsOther(ctx context.Context, in *FsOtherReq, opts ...http.CallOption) (*FsOtherResp, error) {
	var out FsOtherResp
	pattern := "/fs/other"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAlistFsOther))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AlistHTTPClientImpl) Login(ctx context.Context, in *LoginReq, opts ...http.CallOption) (*LoginResp, error) {
	var out LoginResp
	pattern := "/auth/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAlistLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AlistHTTPClientImpl) Me(ctx context.Context, in *MeReq, opts ...http.CallOption) (*MeResp, error) {
	var out MeResp
	pattern := "/me"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAlistMe))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
